{
    "collab_server" : "",
    "contents" : "#' @export\n\ngcShrink <- function(X, target=\"none\", var=\"eq\", cor=\"id\", alpha = seq(0.1,  0.9, 0.1),\n                     plots = TRUE, weighted=FALSE, ext.data=FALSE)\n{\n  ## initialise useful values\n  n <- ncol(X)\n\n  ## center the data.. crucial\n  X <- as.matrix(X)\n  X <- t(scale(t(X), scale=F, center=T))\n  S <- tcrossprod(X)/n\n\n\n  # if target not specified\n  if (is.character(target) && target==\"none\")\n  {\n    # get the target\n    if(!ext.data){\n      target <- getTarget(X, var, cor)\n    }\n    else\n    {\n      ext.data <- as.matrix(ext.data)\n      target <- getTarget(ext.data, var, cor)\n    }\n  }\n\n  # compute log marginals\n  logmarg <- logML(X, target, alpha)\n\n  # max of these gives optimal alpha\n  optimalpha <- alpha[which(logmarg==max(logmarg))]\n  if (plots){\n    plot(alpha, logmarg, col = 'blue', pch = 16,\n       ylab = \"log marginal likelihoods\", xlab = expression(alpha))\n\n    lines(x = rep(optimalpha, 2), y = c(min(logmarg), max(logmarg)), col='red')\n  }\n\n  # compute the estimate\n  if (weighted==FALSE){\n    # put all weight on alpha with highest log marginal\n    sigmahat <- ((1 - optimalpha) * S) + (optimalpha * target)\n  } else {\n    # weight each value of alpha\n    marg <- exp(logmarg - matrixStats::logSumExp(logmarg))\n    weights <- alpha*marg\n    sigmahat <- ((1-sum(weights))*S) + (sum(weights)*target)\n  }\n\n  # # compute the variance for each individual element of sigmahat\n  # # parameters\n  # nu <- (optimalpha/(1-optimalpha)) + p + 1\n  # Psi <- sigmahat * (optimalpha/(1-optimalpha))\n  #\n  # # compute the numerator of the expression for the variances\n  # variances <- matrix(0, nrow(sigmahat), ncol(sigmahat))\n  # for (i in 1:nrow(sigmahat)){\n  #   for (j in 1:ncol(sigmahat)){\n  #     variances[i, j] <- (nu - p + 1)*Psi[i, j]^2 + (nu - p - 1)*Psi[i, i]*Psi[j, j]\n  #   }\n  # }\n  #\n  # # Divide all of these by the denominator of the variances\n  # denvar <- (nu - p)*((nu - p - 1)^2)*(nu - p - 3)\n  # variances <- variances/denvar\n\n  # return the estimated matrix, the optimal shrinkage intrensity,\n  # the sample covariance matrix and the matrix of element-wise variances\n  list(\"sigmahat\" = sigmahat, \"optimalpha\" = optimalpha, \"samplecov\" = S,\n       \"target\"= target,\n       #\"variances\"=variances,\n       \"logmarg\" = logmarg)\n}\n",
    "created" : 1491394404912.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "79043590",
    "id" : "2EBCF768",
    "lastKnownWriteTime" : 1491394882,
    "last_content_update" : 1491394882202,
    "path" : "~/R/packages/TAS/R/gcShrink.R",
    "project_path" : "R/gcShrink.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}